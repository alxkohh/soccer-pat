﻿/*
	Model for a simplified football match.
	Approach is high level, looking at teamA vs teamB, not looking at individual footballers.

	Some assumptions / simplified rules for our football match:

	1. Ball does not go out of bounds
	2. No fouls committed
	3. Shots are not blocked by defenders. It is always the goalkeeper that tries to save the shot.
	4. Players will never pass or dribble backwards
*/

#import "PAT.Lib.Football";

// changed. previously teamA is 1, teamB is 2
#define teamA 0;
#define teamB 1;
// simplified football pitch, only 4 zones. A large value would mean closer proximity to teamB's goalpost.

#define zones 10;
#define teamA_penalty_box 0;	// teamA's goalpost is inside this zone
#define teamA_midfield_zone 4;
#define teamB_midfield_zone 5;
#define teamB_penalty_box 9;	// teamB's goalpost is inside this zone

#define time_limit 45;
var time = 0;

var ball_loc = teamA_midfield_zone;	// for the case where teamA starts the match
// Arsenal,Aston Villa,Brighton,Burnley,Chelsea,Crystal Palace,Everton,Fulham,Leeds United,Leicester City,Liverpool,Manchester City,Manchester Utd,Newcastle Utd,Sheffield Utd,Southampton,Tottenham,West Brom,West Ham,Wolves

hvar shoot_scores = [98, 98, 91, 91, 98, 102, 114, 87, 102, 110, 98, 114, 106, 94, 83, 106, 118, 91, 110, 87];
hvar save_scores = [100, 118, 84, 110, 99, 89, 102, 109, 106, 101, 96, 116, 102, 91, 96, 80, 115, 95, 96, 95];
hvar s_pass_scores = [106, 90, 93, 84, 115, 90, 99, 102, 99, 101, 111, 122, 113, 91, 95, 99, 103, 89, 89, 108];
hvar l_pass_scores = [106, 96, 103, 87, 114, 89, 104, 102, 103, 101, 111, 121, 110, 90, 88, 86, 102, 84, 96, 108];
hvar s_intercept_scores = [104, 99, 104, 103, 91, 106, 113, 91, 86, 88, 87, 103, 102, 109, 110, 76, 102, 107, 113, 107];
hvar l_intercept_scores = [101, 86, 97, 98, 93, 119, 105, 102, 79, 100, 88, 88, 96, 113, 117, 98, 101, 105, 106, 109];
hvar dribble_scores = [86, 121, 105, 106, 94, 98, 95, 117, 93, 85, 104, 95, 97, 101, 95, 95, 106, 85, 104, 116];
hvar tackle_scores = [96, 115, 105, 113, 100, 107, 100, 103, 86, 100, 94, 103, 79, 101, 92, 119, 111, 90, 87, 101];
hvar teamA_number = 3;
hvar teamB_number  = 12;
hvar s_pass_score = [s_pass_scores[teamA_number], s_pass_scores[teamB_number]];
hvar l_pass_score =  [l_pass_scores[teamA_number], l_pass_scores[teamB_number]];
hvar s_intercept_score =  [s_intercept_scores[teamA_number], s_intercept_scores[teamB_number]];
hvar l_intercept_score =  [l_intercept_scores[teamA_number], l_intercept_scores[teamB_number]];
hvar shoot_score =  [shoot_scores[teamA_number], shoot_scores[teamB_number]];
hvar save_score =  [save_scores[teamA_number], save_scores[teamB_number]];
hvar dribble_score =  [dribble_scores[teamA_number], dribble_scores[teamB_number]];
hvar tackle_score =  [tackle_scores[teamA_number], tackle_scores[teamB_number]];

hvar tmp;


/* 
	A few of the popular attack strategies used by teams in real life (past | present).

	tiki taka - quick short passes (barcelona, arsenal | man city)
	route one - long ball upfield, eg. to target man (england, stoke city | many weak teams)
	star dribbler - pass the ball to star dribbler, watch him weave through opponents (messi, ronaldo, hazard | neymar, mbappe, son)
	
	For our model, star dribbler is the best strategy. route one is the worst. -> Same as real life
*/
#define tiki_taka 1000;
#define route_one 2000;
#define star_dribbler 3000;

// Set each team's attack strategy
var teamA_attack_strategy = route_one;
var teamB_attack_strategy = star_dribbler;

var teamA_score = 0;
var teamB_score = 0;

#define match_end time == time_limit;

#define teamA_win match_end && teamA_score > teamB_score;
#define teamB_win match_end && teamA_score < teamB_score;
#define draw match_end && teamA_score == teamB_score;



// With all the variables and macros out of the way, the model begins now

teamA_attack = attack(teamA);
teamB_attack = attack(teamB);

attack(attacking_team) = timer { time++; } -> (
	[!match_end] case {
		attacking_team == teamA: attack_with_strategy(teamA, teamA_attack_strategy)
		attacking_team == teamB: attack_with_strategy(teamB, teamB_attack_strategy)
		default: Skip	// error case! 
	} []
	[match_end] Skip 
);

attack_with_strategy(attacking_team, attack_strategy) = case {
	
	attack_strategy == tiki_taka: attack_tiki_taka(attacking_team)
	attack_strategy == route_one: attack_route_one(attacking_team)
	attack_strategy == star_dribbler: attack_star_dribbler(attacking_team)
	default: Skip	// error case!
};

attack_tiki_taka(attacking_team) = pcase {

	5 : stay -> attack(attacking_team)
	10: run -> attack(attacking_team)
	50: short_pass -> intercept_short_pass( call(opponent_of, attacking_team) )
	5 : long_pass -> intercept_long_pass( call(opponent_of, attacking_team) )
	10: dribble -> tackle( call(opponent_of, attacking_team) )
	20 * call(can_shoot, attacking_team, ball_loc): shoot -> goalkeeper_save( call(opponent_of, attacking_team) )
};

attack_route_one(attacking_team) = pcase {

	10: stay -> attack(attacking_team)
	10: run -> attack(attacking_team)
	5 : short_pass -> intercept_short_pass( call(opponent_of, attacking_team) )
	50: long_pass -> intercept_long_pass( call(opponent_of, attacking_team) )
	5 : dribble -> tackle( call(opponent_of, attacking_team) )
	20 * call(can_shoot, attacking_team, ball_loc): shoot -> goalkeeper_save( call(opponent_of, attacking_team) )
};

attack_star_dribbler(attacking_team) = pcase {

	5 : stay -> attack(attacking_team)
	20: run -> attack(attacking_team)
	20: short_pass -> intercept_short_pass( call(opponent_of, attacking_team) )		// read as "opponent of the attacking team"
	5 : long_pass -> intercept_long_pass( call(opponent_of, attacking_team) )
	30: dribble -> tackle( call(opponent_of, attacking_team) )
	20 * call(can_shoot, attacking_team, ball_loc): shoot -> goalkeeper_save( call(opponent_of, attacking_team) )
};

/*
	Four types of defenses. All of them can fail to materialise.
	
	Currently, intercept_short_pass and tackle share the same implementation

	Note:
	For our context, there is no concept called "defending_strategy".
	Because a defending action is really just to counter against a specific type of attacking action.
	eg. tackle against a dribble, etc
*/

intercept_long_pass(defending_team) = {tmp = 100 - call(long_pass_success_rate, defending_team, ball_loc, l_pass_score[1-defending_team], l_intercept_score[defending_team]);} -> pcase {
	tmp	  		: succeed -> attack(defending_team)	// change of possession
	100 - tmp	: fail { ball_loc = call(ball_move_forward, call(opponent_of, defending_team), 2, ball_loc) } -> attack( call(opponent_of, defending_team) ) 	// NO change of possession, ball move forward
};


intercept_short_pass(defending_team) = {tmp = 100 - call(short_pass_success_rate, defending_team, ball_loc, s_pass_score[1-defending_team], s_intercept_score[defending_team]);} -> pcase {
	tmp	  		: succeed -> attack(defending_team)	// change of possession
	100 - tmp	: fail { ball_loc = call(ball_move_forward, call(opponent_of, defending_team), 1, ball_loc) } -> attack( call(opponent_of, defending_team) ) 	// NO change of possession, ball move forward
};

tackle(defending_team) = {tmp = 100 - call(dribble_success_rate, defending_team, ball_loc, dribble_score[1-defending_team], tackle_score[defending_team]);} -> pcase {
	tmp			: succeed -> attack(defending_team)	// change of possession
	100 - tmp	: fail { ball_loc = call(ball_move_forward, call(opponent_of, defending_team), 1, ball_loc) }-> attack( call(opponent_of, defending_team) ) 	// NO change of possession, ball move forward
};

goalkeeper_save(defending_team) = {tmp = 100 - call(shoot_success_rate, defending_team, ball_loc, shoot_score[1-defending_team], save_score[defending_team]);} -> pcase {

	tmp	  : succeed -> attack(defending_team)	// change of possession
	100 - tmp: 
	fail {

		//if (teamA_score - teamB_score < -3 || teamA_score - teamB_score > 3) goalSkip = true;  
		if(defending_team == teamB) { teamA_score++;ball_loc=teamB_midfield_zone; } else { teamB_score++;ball_loc=teamA_midfield_zone; };
		} -> attack(defending_team)
};



// Run a few assertions, to test the model above


teamA_start = { ball_loc = teamA_midfield_zone; call(setZones, zones); } -> teamA_attack;
teamB_start = { ball_loc = teamB_midfield_zone; call(setZones, zones); } -> teamB_attack;

#assert teamA_start reaches teamA_win with prob;
#assert teamA_start reaches teamB_win with prob;
#assert teamA_start reaches draw with prob;

#assert teamB_start reaches teamA_win with prob;
#assert teamB_start reaches teamB_win with prob;
#assert teamB_start reaches draw with prob;

coin_toss = pcase {
	50: teamA_start
	50: teamB_start
};

#define teamA_score_below_four teamA_score < 4 && match_end;

#assert coin_toss reaches teamA_win with prob;
#assert coin_toss reaches teamB_win with prob;
#assert coin_toss reaches draw with prob;
#assert coin_toss reaches teamA_score_below_four with prob;

#define under_twohalf_goals teamA_score + teamB_score < 3 && match_end;
#assert coin_toss  reaches under_twohalf_goals with prob;

#define over_twohalf_goals teamA_score + teamB_score > 2 && match_end;
#assert coin_toss  reaches over_twohalf_goals with prob;

#define both_score teamA_score > 0 && teamB_score > 0 && match_end;
#assert coin_toss reaches both_score with prob;


#define teamA_15_handicap teamA_score - teamB_score > 1 && match_end;
#assert coin_toss reaches teamA_15_handicap with prob;


#define teamB_15_handicap teamB_score - teamA_score > 1 && match_end;
#assert coin_toss reaches teamB_15_handicap with prob;

#define teamA_win_to_nil teamA_score > 0 && teamB_score == 0 && match_end;
#assert coin_toss reaches teamA_win_to_nil with prob;

#define teamB_25_handicap teamB_score - teamA_score > 2 && match_end;
#assert coin_toss reaches teamB_25_handicap with prob;

#define no_goal teamB_score + teamA_score == 0 && match_end;
#assert coin_toss reaches no_goal with prob;

#define teamA_cleansheet teamB_score==0 && match_end;
#assert coin_toss reaches teamA_cleansheet with prob;

// DEBUG
//teamA_freekick = { ball_loc = zones; call(setZones, zones); } -> goalkeeper_save(teamB);
//var shootChancesA[10];
//var shootChancesB[10];
//var i = 0;
//
//getShootChances = {call(setZones, zones); while(i < zones){
//	ball_loc = i;
//	shootChancesA[i] = call(shoot_success_rate, teamA, ball_loc, shoot_score[teamA], save_score[teamB]);
//	shootChancesB[i] = call(shoot_success_rate, teamB, ball_loc, shoot_score[teamB], save_score[teamA]);
//	i++;
//}} -> Skip;
