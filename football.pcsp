﻿/*
	Model for a simplified football match.
	Approach is high level, looking at teamA vs teamB, not looking at individual footballers.

	Some assumptions / simplified rules for our football match:

	1. First team to score wins the entire match
	2. teamA kicks off the match
	3. Ball does not go out of bounds
	4. No fouls committed
	5. Shots are not blocked by defenders. It is always the goalkeeper that tries to save the shot.
	6. Players will never pass or dribble backwards
*/

#import "PAT.Lib.Football";

#define teamA 1;
#define teamB 2;
#define successRate(team) if (team == teamA) {100-ball_loc;} else {ball_loc};

// simplified football pitch, only 4 zones. A large value would mean closer proximity to teamB's goalpost.

#define teamA_penalty_box 20;	// teamA's goalpost is inside this zone
#define teamA_midfield_zone 40;
#define teamB_midfield_zone 60;
#define teamB_penalty_box 80;	// teamB's goalpost is inside this zone

var winner = -1;	// no winner yet at the start

#define teamA_win winner == teamA;
#define teamB_win winner == teamB;

var ball_loc = teamA_midfield_zone;	// initial ball location is team A midfield zone, because teamA starts the match

Attack(team, other) = pcase {
	5: stay -> Attack(team, other)
	15: run -> Attack(team, other)
	20: dribble -> Tackle(other, team)
	40: pass -> Intercept(other, team)
	20: shoot -> GoalSave(other, team)
};

/*
	Three types of defenses. All of them can fail to materialise.
	
	Tackle a dribbling opponent
	Intercept a pass
	Goalkeeper save a shot

*/
Tackle(team, other) = pcase {
	call(successRate, team): succeed -> Attack(team, other)
	100 - call(successRate, team): fail{ball_loc = call(ball_move_forward, other, 1, ball_loc)} -> Attack(other, team)
};

Intercept(team, other) = pcase {
	call(successRate, team): succeed -> Attack(team, other)
	100 - call(successRate, team): fail{ball_loc = call(ball_move_forward, other, 2, ball_loc)} -> Attack(other, team)
	// ball move forward 1 zone for attacking team
};

GoalSave(team, other) = pcase {
	// logic: large ball_loc means ball near teamB's goalpost. chances are, teamB goalkeeper fail to save the close range shot.
	100 - call(successRate, team): succeed -> Attack(team, other)
	call(successRate, team): fail { winner = other } -> Skip	// teamA scores and hence wins the match!
	// team scores and hence wins the match!
};

coin_toss = pcase {
	50: {ball_loc = teamA_midfield_zone} -> Attack(teamA, teamB)
	50: {ball_loc = teamB_midfield_zone} -> Attack(teamB, teamA)
};

#assert coin_toss reaches teamA_win with prob;	// prob of teamA winning the match

teamA_start = Attack(teamA, teamB);
teamB_start = Attack(teamB, teamA);
#assert teamA_start reaches teamA_win with prob;
#assert teamB_start reaches teamB_win with prob;

/* 
	Probability of teamA winning the match is 55.63%
	
	That is to say, teamA has a greater chance of winning the match compared to teamB! (44.37%)
	
	Why is that so?
	Observe the match conditions - teamA gets to start the match, at teamA_midfield_zone.
	Apparently, that gives teamA a slight advantage.
*/
